
TI86_LCD_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000478c  2000000c  080051f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004798  080051f8  00024798  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ec0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000265b  00000000  00000000  00032efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028c7c  00000000  00000000  00037800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da18  00000000  00000000  0006047c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010212d  00000000  00000000  0006de94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ffc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c10  00000000  00000000  0017003c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080051a4 	.word	0x080051a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080051a4 	.word	0x080051a4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fd79 	bl	8001032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f840 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f9ec 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 f9cc 	bl	80008e4 <MX_DMA_Init>
  MX_ETH_Init();
 800054c:	f000 f8d2 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f96a 	bl	8000828 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f998 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000558:	f000 f90c 	bl	8000774 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DMA_RegisterCallback(&hdma_tim1_ch4_trig_com, HAL_DMA_XFER_HALFCPLT_CB_ID,
 800055c:	4a13      	ldr	r2, [pc, #76]	; (80005ac <main+0x74>)
 800055e:	2101      	movs	r1, #1
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <main+0x78>)
 8000562:	f001 f98f 	bl	8001884 <HAL_DMA_RegisterCallback>
		  	  	  	  	  	&TransferHalfComplete);
  HAL_DMA_RegisterCallback(&hdma_tim1_ch4_trig_com, HAL_DMA_XFER_CPLT_CB_ID,
 8000566:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <main+0x7c>)
 8000568:	2100      	movs	r1, #0
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0x78>)
 800056c:	f001 f98a 	bl	8001884 <HAL_DMA_RegisterCallback>
  		  	  	  	  	  	&TransferComplete);

  if (HAL_DMA_Start_IT(&hdma_tim1_ch4_trig_com, GPIOx_IDR, (uint32_t*)GPIO_BUF, GPIO_BUF_LEN) != HAL_OK)
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <main+0x80>)
 8000572:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000576:	4911      	ldr	r1, [pc, #68]	; (80005bc <main+0x84>)
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0x78>)
 800057a:	f000 ff99 	bl	80014b0 <HAL_DMA_Start_IT>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <main+0x50>
  {
    /* Transfer Error */
    Error_Handler();
 8000584:	f000 face 	bl	8000b24 <Error_Handler>
  }

  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_ID_CC2);
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <main+0x88>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <main+0x88>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f042 0202 	orr.w	r2, r2, #2
 8000596:	60da      	str	r2, [r3, #12]

  /* Enable the TIMx IC channel */
  TIM_CCxChannelCmd(htim1.Instance, DMA_CHANNEL_6, TIM_CCx_ENABLE);
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <main+0x88>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2201      	movs	r2, #1
 800059e:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fe14 	bl	80041d0 <TIM_CCxChannelCmd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x70>
 80005aa:	bf00      	nop
 80005ac:	08000aed 	.word	0x08000aed
 80005b0:	20000028 	.word	0x20000028
 80005b4:	08000b09 	.word	0x08000b09
 80005b8:	20000088 	.word	0x20000088
 80005bc:	40021401 	.word	0x40021401
 80005c0:	2000470c 	.word	0x2000470c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0b8      	sub	sp, #224	; 0xe0
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ce:	2234      	movs	r2, #52	; 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fdde 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2290      	movs	r2, #144	; 0x90
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fdcf 	bl	8005194 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f6:	f002 fa2d 	bl	8002a54 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <SystemClock_Config+0x124>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a3a      	ldr	r2, [pc, #232]	; (80006e8 <SystemClock_Config+0x124>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <SystemClock_Config+0x124>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000612:	4b36      	ldr	r3, [pc, #216]	; (80006ec <SystemClock_Config+0x128>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061a:	4a34      	ldr	r2, [pc, #208]	; (80006ec <SystemClock_Config+0x128>)
 800061c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <SystemClock_Config+0x128>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fa54 	bl	8002b14 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000672:	f000 fa57 	bl	8000b24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000676:	f002 f9fd 	bl	8002a74 <HAL_PWREx_EnableOverDrive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000680:	f000 fa50 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fcdf 	bl	8003070 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80006b8:	f000 fa34 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <SystemClock_Config+0x12c>)
 80006be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fec6 	bl	8003460 <HAL_RCCEx_PeriphCLKConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80006da:	f000 fa23 	bl	8000b24 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	37e0      	adds	r7, #224	; 0xe0
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000
 80006f0:	00200100 	.word	0x00200100

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ETH_Init+0x78>)
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <MX_ETH_Init+0x7c>)
 80006fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ETH_Init+0x78>)
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ETH_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ETH_Init+0x78>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ETH_Init+0x78>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ETH_Init+0x78>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	3302      	adds	r3, #2
 8000722:	22e1      	movs	r2, #225	; 0xe1
 8000724:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ETH_Init+0x78>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	3303      	adds	r3, #3
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_ETH_Init+0x78>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	3304      	adds	r3, #4
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_ETH_Init+0x78>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	3305      	adds	r3, #5
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_ETH_Init+0x78>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_ETH_Init+0x78>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_ETH_Init+0x78>)
 8000752:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000756:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_ETH_Init+0x78>)
 800075a:	f001 f9c5 	bl	8001ae8 <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000764:	f000 f9de 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000474c 	.word	0x2000474c
 8000770:	40028000 	.word	0x40028000

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_TIM1_Init+0xac>)
 8000794:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_TIM1_Init+0xb0>)
 8000796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_TIM1_Init+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_TIM1_Init+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_TIM1_Init+0xac>)
 80007a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_TIM1_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_TIM1_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_TIM1_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007be:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_TIM1_Init+0xac>)
 80007c0:	f003 fa74 	bl	8003cac <HAL_TIM_IC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007ca:	f000 f9ab 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	; (8000820 <MX_TIM1_Init+0xac>)
 80007e2:	f003 fd1b 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 f99a 	bl	8000b24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007f0:	2302      	movs	r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	220c      	movs	r2, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_TIM1_Init+0xac>)
 8000808:	f003 fa7b 	bl	8003d02 <HAL_TIM_IC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000812:	f000 f987 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000470c 	.word	0x2000470c
 8000824:	40010000 	.word	0x40010000

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f003 fd64 	bl	8004338 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f955 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20004288 	.word	0x20004288
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2206      	movs	r2, #6
 8000898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f001 ff79 	bl	80027c2 <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f925 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004308 	.word	0x20004308

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x38>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x38>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x38>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	203c      	movs	r0, #60	; 0x3c
 8000908:	f000 fced 	bl	80012e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800090c:	203c      	movs	r0, #60	; 0x3c
 800090e:	f000 fd06 	bl	800131e <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b66      	ldr	r3, [pc, #408]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a65      	ldr	r2, [pc, #404]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	623b      	str	r3, [r7, #32]
 800094c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b5d      	ldr	r3, [pc, #372]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a59      	ldr	r2, [pc, #356]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a53      	ldr	r2, [pc, #332]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4d      	ldr	r2, [pc, #308]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4b      	ldr	r3, [pc, #300]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a41      	ldr	r2, [pc, #260]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3b      	ldr	r2, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b39      	ldr	r3, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009fc:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x1b4>)
 80009fe:	f001 fe89 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000a08:	f001 fe84 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, outFR_Pin|outRow_Pin|outNibble_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	21e0      	movs	r1, #224	; 0xe0
 8000a10:	4832      	ldr	r0, [pc, #200]	; (8000adc <MX_GPIO_Init+0x1bc>)
 8000a12:	f001 fe7f 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482e      	ldr	r0, [pc, #184]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 8000a2c:	f001 fcc8 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_d1_Pin lcd_d2_Pin lcd_d3_Pin lcd_d4_Pin
                           lcd_LP_Pin lcd_FR_Pin */
  GPIO_InitStruct.Pin = lcd_d1_Pin|lcd_d2_Pin|lcd_d3_Pin|lcd_d4_Pin
 8000a30:	233f      	movs	r3, #63	; 0x3f
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
                          |lcd_LP_Pin|lcd_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0x1c8>)
 8000a44:	f001 fcbc 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a48:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481c      	ldr	r0, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0x1b4>)
 8000a62:	f001 fcad 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000a7e:	f001 fc9f 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000a96:	f001 fc93 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : outFR_Pin outRow_Pin outNibble_Pin */
  GPIO_InitStruct.Pin = outFR_Pin|outRow_Pin|outNibble_Pin;
 8000a9a:	23e0      	movs	r3, #224	; 0xe0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480a      	ldr	r0, [pc, #40]	; (8000adc <MX_GPIO_Init+0x1bc>)
 8000ab2:	f001 fc85 	bl	80023c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2028      	movs	r0, #40	; 0x28
 8000abc:	f000 fc13 	bl	80012e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac0:	2028      	movs	r0, #40	; 0x28
 8000ac2:	f000 fc2c 	bl	800131e <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	; 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	10110000 	.word	0x10110000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40021400 	.word	0x40021400

08000aec <TransferHalfComplete>:

/* USER CODE BEGIN 4 */

static void TransferHalfComplete(DMA_HandleTypeDef *hdma) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(outFR_GPIO_Port, outFR_Pin);
 8000af4:	2120      	movs	r1, #32
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <TransferHalfComplete+0x18>)
 8000af8:	f001 fe25 	bl	8002746 <HAL_GPIO_TogglePin>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020c00 	.word	0x40020c00

08000b08 <TransferComplete>:

static void TransferComplete(DMA_HandleTypeDef *hdma) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(outFR_GPIO_Port, outFR_Pin);
 8000b10:	2120      	movs	r1, #32
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <TransferComplete+0x18>)
 8000b14:	f001 fe17 	bl	8002746 <HAL_GPIO_TogglePin>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <HAL_ETH_MspInit+0x158>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	f040 8096 	bne.w	8000ccc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a4c      	ldr	r2, [pc, #304]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	623b      	str	r3, [r7, #32]
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a46      	ldr	r2, [pc, #280]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a34      	ldr	r2, [pc, #208]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c48:	2332      	movs	r3, #50	; 0x32
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_ETH_MspInit+0x160>)
 8000c64:	f001 fbac 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c68:	2386      	movs	r3, #134	; 0x86
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <HAL_ETH_MspInit+0x164>)
 8000c84:	f001 fb9c 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <HAL_ETH_MspInit+0x168>)
 8000ca6:	f001 fb8b 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000caa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <HAL_ETH_MspInit+0x16c>)
 8000cc8:	f001 fb7a 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3738      	adds	r7, #56	; 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40028000 	.word	0x40028000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40021800 	.word	0x40021800

08000cec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <HAL_TIM_IC_MspInit+0xf4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d163      	bne.n	8000dd6 <HAL_TIM_IC_MspInit+0xea>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_TIM_IC_MspInit+0xf8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = lcdSCP_Pin;
 8000d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(lcdSCP_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <HAL_TIM_IC_MspInit+0xfc>)
 8000d5c:	f001 fb30 	bl	80023c0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <HAL_TIM_IC_MspInit+0x104>)
 8000d64:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d68:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8000da2:	4812      	ldr	r0, [pc, #72]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000da4:	f000 fad6 	bl	8001354 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_TIM_IC_MspInit+0xc6>
    {
      Error_Handler();
 8000dae:	f7ff feb9 	bl	8000b24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_TIM_IC_MspInit+0x100>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	20000028 	.word	0x20000028
 8000df0:	40026470 	.word	0x40026470

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_UART_MspInit+0x7c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d128      	bne.n	8000e68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_UART_MspInit+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0x84>)
 8000e64:	f001 faac 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004800 	.word	0x40004800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9c:	d141      	bne.n	8000f22 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_PCD_MspInit+0xb4>)
 8000ed4:	f001 fa74 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <HAL_PCD_MspInit+0xb4>)
 8000eee:	f001 fa67 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6353      	str	r3, [r2, #52]	; 0x34
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f890 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f98:	f001 fbf0 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA2_Stream4_IRQHandler+0x10>)
 8000fa6:	f000 fae3 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000028 	.word	0x20000028

08000fb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <SystemInit+0x28>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <SystemInit+0x28>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SystemInit+0x28>)
 8000fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fce:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fe6:	e003      	b.n	8000ff0 <LoopCopyDataInit>

08000fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fee:	3104      	adds	r1, #4

08000ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ff8:	d3f6      	bcc.n	8000fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ffc:	e002      	b.n	8001004 <LoopFillZerobss>

08000ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001000:	f842 3b04 	str.w	r3, [r2], #4

08001004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001008:	d3f9      	bcc.n	8000ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd3 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f004 f89d 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fa91 	bl	8000538 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800101c:	080051ec 	.word	0x080051ec
  ldr  r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001024:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800102c:	20004798 	.word	0x20004798

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>

08001032 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f94a 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 f805 	bl	800104c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001042:	f7ff fd77 	bl	8000b34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f965 	bl	800133a <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f92d 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20004794 	.word	0x20004794

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20004794 	.word	0x20004794

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_Delay+0x40>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	4313      	orrs	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	05fa0000 	.word	0x05fa0000

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff3e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff31 	bl	8001194 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff feb8 	bl	80010d4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e099      	b.n	80014a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e00f      	b.n	80013b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe9f 	bl	80010d4 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d908      	bls.n	80013b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e078      	b.n	80014a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e8      	bne.n	8001392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_DMA_Init+0x158>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	2b04      	cmp	r3, #4
 800140a:	d107      	bne.n	800141c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4313      	orrs	r3, r2
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f023 0307 	bic.w	r3, r3, #7
 8001432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4313      	orrs	r3, r2
 800143c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2b04      	cmp	r3, #4
 8001444:	d117      	bne.n	8001476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 facb 	bl	80019f4 <DMA_CheckFifoParam>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001472:	2301      	movs	r3, #1
 8001474:	e016      	b.n	80014a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fa82 	bl	8001988 <DMA_CalcBaseAndBitshift>
 8001484:	4603      	mov	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	223f      	movs	r2, #63	; 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	e010803f 	.word	0xe010803f

080014b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_DMA_Start_IT+0x26>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e048      	b.n	8001568 <HAL_DMA_Start_IT+0xb8>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d137      	bne.n	800155a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa14 	bl	800192c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	223f      	movs	r2, #63	; 0x3f
 800150a:	409a      	lsls	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0216 	orr.w	r2, r2, #22
 800151e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800152e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0208 	orr.w	r2, r2, #8
 8001546:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e005      	b.n	8001566 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001562:	2302      	movs	r3, #2
 8001564:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001566:	7dfb      	ldrb	r3, [r7, #23]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_DMA_IRQHandler+0x258>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_DMA_IRQHandler+0x25c>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2208      	movs	r2, #8
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0204 	bic.w	r2, r2, #4
 80015c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2208      	movs	r2, #8
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2201      	movs	r2, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f043 0202 	orr.w	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0204 	orr.w	r2, r3, #4
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2210      	movs	r2, #16
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d043      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2210      	movs	r2, #16
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e01f      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	2220      	movs	r2, #32
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808e 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8086 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2220      	movs	r2, #32
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b05      	cmp	r3, #5
 8001718:	d136      	bne.n	8001788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0216 	bic.w	r2, r2, #22
 8001728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_DMA_IRQHandler+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0208 	bic.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07d      	beq.n	800187a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
        }
        return;
 8001786:	e078      	b.n	800187a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d030      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e02b      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d027      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e022      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
 80017c8:	20000000 	.word	0x20000000
 80017cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0210 	bic.w	r2, r2, #16
 80017ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2b00      	cmp	r3, #0
 8001814:	d032      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d022      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d307      	bcc.n	8001856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_DMA_IRQHandler+0x2ca>
 8001854:	e000      	b.n	8001858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x30c>
        return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop

08001884 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	460b      	mov	r3, r1
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_RegisterCallback+0x20>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e03c      	b.n	800191e <HAL_DMA_RegisterCallback+0x9a>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d129      	bne.n	800190c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d829      	bhi.n	8001912 <HAL_DMA_RegisterCallback+0x8e>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_DMA_RegisterCallback+0x40>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018e5 	.word	0x080018e5
 80018cc:	080018ed 	.word	0x080018ed
 80018d0:	080018f5 	.word	0x080018f5
 80018d4:	080018fd 	.word	0x080018fd
 80018d8:	08001905 	.word	0x08001905
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80018e2:	e017      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80018ea:	e013      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80018f2:	e00f      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80018fa:	e00b      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001902:	e007      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800190a:	e003      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
 8001910:	e000      	b.n	8001914 <HAL_DMA_RegisterCallback+0x90>
      break;
 8001912:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800191c:	7dfb      	ldrb	r3, [r7, #23]
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001948:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b40      	cmp	r3, #64	; 0x40
 8001958:	d108      	bne.n	800196c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800196a:	e007      	b.n	800197c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3b10      	subs	r3, #16
 8001998:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <DMA_CalcBaseAndBitshift+0x60>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <DMA_CalcBaseAndBitshift+0x64>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d908      	bls.n	80019c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <DMA_CalcBaseAndBitshift+0x68>)
 80019be:	4013      	ands	r3, r2
 80019c0:	1d1a      	adds	r2, r3, #4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	; 0x58
 80019c6:	e006      	b.n	80019d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <DMA_CalcBaseAndBitshift+0x68>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	aaaaaaab 	.word	0xaaaaaaab
 80019ec:	080051d4 	.word	0x080051d4
 80019f0:	fffffc00 	.word	0xfffffc00

080019f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11f      	bne.n	8001a4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d855      	bhi.n	8001ac0 <DMA_CheckFifoParam+0xcc>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <DMA_CheckFifoParam+0x28>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a3f 	.word	0x08001a3f
 8001a24:	08001a2d 	.word	0x08001a2d
 8001a28:	08001ac1 	.word	0x08001ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d045      	beq.n	8001ac4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3c:	e042      	b.n	8001ac4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a46:	d13f      	bne.n	8001ac8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4c:	e03c      	b.n	8001ac8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a56:	d121      	bne.n	8001a9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d836      	bhi.n	8001acc <DMA_CheckFifoParam+0xd8>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <DMA_CheckFifoParam+0x70>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a7b 	.word	0x08001a7b
 8001a6c:	08001a75 	.word	0x08001a75
 8001a70:	08001a8d 	.word	0x08001a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      break;
 8001a78:	e02f      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a8a:	e021      	b.n	8001ad0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a94:	d11e      	bne.n	8001ad4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a9a:	e01b      	b.n	8001ad4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d902      	bls.n	8001aa8 <DMA_CheckFifoParam+0xb4>
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d003      	beq.n	8001aae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001aa6:	e018      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8001aac:	e015      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00e      	beq.n	8001ad8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
      break;
 8001abe:	e00b      	b.n	8001ad8 <DMA_CheckFifoParam+0xe4>
      break;
 8001ac0:	bf00      	nop
 8001ac2:	e00a      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;
 8001ac4:	bf00      	nop
 8001ac6:	e008      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;
 8001ac8:	bf00      	nop
 8001aca:	e006      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;
 8001acc:	bf00      	nop
 8001ace:	e004      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;
 8001ad0:	bf00      	nop
 8001ad2:	e002      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;   
 8001ad4:	bf00      	nop
 8001ad6:	e000      	b.n	8001ada <DMA_CheckFifoParam+0xe6>
      break;
 8001ad8:	bf00      	nop
    }
  } 
  
  return status; 
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001af8:	4ba9      	ldr	r3, [pc, #676]	; (8001da0 <HAL_ETH_Init+0x2b8>)
 8001afa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e183      	b.n	8001e16 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff f82a 	bl	8000b7c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b9e      	ldr	r3, [pc, #632]	; (8001da4 <HAL_ETH_Init+0x2bc>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	4a9d      	ldr	r2, [pc, #628]	; (8001da4 <HAL_ETH_Init+0x2bc>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b32:	6453      	str	r3, [r2, #68]	; 0x44
 8001b34:	4b9b      	ldr	r3, [pc, #620]	; (8001da4 <HAL_ETH_Init+0x2bc>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b40:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <HAL_ETH_Init+0x2c0>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a98      	ldr	r2, [pc, #608]	; (8001da8 <HAL_ETH_Init+0x2c0>)
 8001b46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b4a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b4c:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <HAL_ETH_Init+0x2c0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4994      	ldr	r1, [pc, #592]	; (8001da8 <HAL_ETH_Init+0x2c0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b70:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b72:	f7ff faaf 	bl	80010d4 <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b78:	e011      	b.n	8001b9e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001b7a:	f7ff faab 	bl	80010d4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b88:	d909      	bls.n	8001b9e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e13b      	b.n	8001e16 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e4      	bne.n	8001b7a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f023 031c 	bic.w	r3, r3, #28
 8001bbe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bc0:	f001 fc1a 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8001bc4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4a78      	ldr	r2, [pc, #480]	; (8001dac <HAL_ETH_Init+0x2c4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d908      	bls.n	8001be0 <HAL_ETH_Init+0xf8>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_ETH_Init+0x2c8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d804      	bhi.n	8001be0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e027      	b.n	8001c30 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_ETH_Init+0x2c8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d908      	bls.n	8001bfa <HAL_ETH_Init+0x112>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4a72      	ldr	r2, [pc, #456]	; (8001db4 <HAL_ETH_Init+0x2cc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d804      	bhi.n	8001bfa <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f043 030c 	orr.w	r3, r3, #12
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	e01a      	b.n	8001c30 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4a6d      	ldr	r2, [pc, #436]	; (8001db4 <HAL_ETH_Init+0x2cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d903      	bls.n	8001c0a <HAL_ETH_Init+0x122>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_ETH_Init+0x2d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d911      	bls.n	8001c2e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4a6a      	ldr	r2, [pc, #424]	; (8001db8 <HAL_ETH_Init+0x2d0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d908      	bls.n	8001c24 <HAL_ETH_Init+0x13c>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_ETH_Init+0x2d4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d804      	bhi.n	8001c24 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e005      	b.n	8001c30 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	e000      	b.n	8001c30 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c2e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f956 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9b3 	bl	8001fbc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0d9      	b.n	8001e16 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c62:	20ff      	movs	r0, #255	; 0xff
 8001c64:	f7ff fa42 	bl	80010ec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a7 	beq.w	8001dc0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c72:	f7ff fa2f 	bl	80010d4 <HAL_GetTick>
 8001c76:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2101      	movs	r1, #1
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8cd 	bl	8001e20 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001c86:	f7ff fa25 	bl	80010d4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d90f      	bls.n	8001cb8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c9c:	6939      	ldr	r1, [r7, #16]
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f98c 	bl	8001fbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0ae      	b.n	8001e16 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0da      	beq.n	8001c78 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f911 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f96e 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e094      	b.n	8001e16 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f9f2 	bl	80010d4 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f890 	bl	8001e20 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d00:	f7ff f9e8 	bl	80010d4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d90f      	bls.n	8001d32 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d16:	6939      	ldr	r1, [r7, #16]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f94f 	bl	8001fbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e071      	b.n	8001e16 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0da      	beq.n	8001cf2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	461a      	mov	r2, r3
 8001d42:	211f      	movs	r1, #31
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f86b 	bl	8001e20 <HAL_ETH_ReadPHYRegister>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d54:	6939      	ldr	r1, [r7, #16]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f930 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d64:	2301      	movs	r3, #1
 8001d66:	e056      	b.n	8001e16 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e002      	b.n	8001d82 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	e037      	b.n	8001e04 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e032      	b.n	8001e04 <HAL_ETH_Init+0x31c>
 8001d9e:	bf00      	nop
 8001da0:	03938700 	.word	0x03938700
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	01312cff 	.word	0x01312cff
 8001db0:	02160ebf 	.word	0x02160ebf
 8001db4:	039386ff 	.word	0x039386ff
 8001db8:	05f5e0ff 	.word	0x05f5e0ff
 8001dbc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f889 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8e6 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e00c      	b.n	8001e16 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001dfc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e00:	f7ff f974 	bl	80010ec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8d8 	bl	8001fbc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop

08001e20 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b82      	cmp	r3, #130	; 0x82
 8001e40:	d101      	bne.n	8001e46 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e050      	b.n	8001ee8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2282      	movs	r2, #130	; 0x82
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 031c 	and.w	r3, r3, #28
 8001e5c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8a1b      	ldrh	r3, [r3, #16]
 8001e62:	02db      	lsls	r3, r3, #11
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	019b      	lsls	r3, r3, #6
 8001e70:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 0302 	bic.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e92:	f7ff f91f 	bl	80010d4 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e98:	e015      	b.n	8001ec6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e9a:	f7ff f91b 	bl	80010d4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d309      	bcc.n	8001ebe <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e014      	b.n	8001ee8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e4      	bne.n	8001e9a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b42      	cmp	r3, #66	; 0x42
 8001f10:	d101      	bne.n	8001f16 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	e04e      	b.n	8001fb4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2242      	movs	r2, #66	; 0x42
 8001f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 031c 	and.w	r3, r3, #28
 8001f2c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8a1b      	ldrh	r3, [r3, #16]
 8001f32:	02db      	lsls	r3, r3, #11
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	019b      	lsls	r3, r3, #6
 8001f40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6c:	f7ff f8b2 	bl	80010d4 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f72:	e015      	b.n	8001fa0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001f74:	f7ff f8ae 	bl	80010d4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d309      	bcc.n	8001f98 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e00d      	b.n	8001fb4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e4      	bne.n	8001f74 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b0      	sub	sp, #192	; 0xc0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002006:	663b      	str	r3, [r7, #96]	; 0x60
 8002008:	e001      	b.n	800200e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002018:	2300      	movs	r3, #0
 800201a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	4bab      	ldr	r3, [pc, #684]	; (8002344 <ETH_MACDMAConfig+0x388>)
 8002096:	4013      	ands	r3, r2
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800209c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020a0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020a4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020a8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020ae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020b2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020b6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020bc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020c0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020c4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020c8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020cc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe fffb 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002104:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002108:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800210a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800210e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002114:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800211a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002120:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002124:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800212c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800212e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe ffd6 	bl	80010ec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002152:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800215c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002170:	4013      	ands	r3, r2
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800217a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800217c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002180:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002186:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800218c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002192:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002198:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800219a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7fe ff97 	bl	80010ec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe ff82 	bl	80010ec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002204:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002216:	2304      	movs	r3, #4
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800221a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f241 0318 	movw	r3, #4120	; 0x1018
 8002246:	4413      	add	r3, r2
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800224e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <ETH_MACDMAConfig+0x38c>)
 8002254:	4013      	ands	r3, r2
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800225a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800225c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800225e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002260:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002262:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002264:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002266:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002268:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800226a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800226c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800226e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002270:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002272:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002276:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800227a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800227c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f241 0318 	movw	r3, #4120	; 0x1018
 800228e:	4413      	add	r3, r2
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f241 0318 	movw	r3, #4120	; 0x1018
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7fe ff20 	bl	80010ec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b4:	4413      	add	r3, r2
 80022b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80022ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80022d6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fef9 	bl	80010ec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10d      	bne.n	800232c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f241 031c 	movw	r3, #4124	; 0x101c
 8002318:	4413      	add	r3, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6811      	ldr	r1, [r2, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <ETH_MACDMAConfig+0x390>)
 8002322:	431a      	orrs	r2, r3
 8002324:	f241 031c 	movw	r3, #4124	; 0x101c
 8002328:	440b      	add	r3, r1
 800232a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f80b 	bl	8002350 <ETH_MACAddressConfig>
}
 800233a:	bf00      	nop
 800233c:	37c0      	adds	r7, #192	; 0xc0
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	ff20810f 	.word	0xff20810f
 8002348:	f8de3f23 	.word	0xf8de3f23
 800234c:	00010040 	.word	0x00010040

08002350 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3204      	adds	r2, #4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <ETH_MACAddressConfig+0x68>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3303      	adds	r3, #3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061a      	lsls	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4313      	orrs	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <ETH_MACAddressConfig+0x6c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40028040 	.word	0x40028040
 80023bc:	40028044 	.word	0x40028044

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e175      	b.n	80026cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8164 	bne.w	80026c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d00b      	beq.n	800241e <HAL_GPIO_Init+0x5e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002412:	2b11      	cmp	r3, #17
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b12      	cmp	r3, #18
 800241c:	d130      	bne.n	8002480 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0201 	and.w	r2, r3, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x100>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80be 	beq.w	80026c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x320>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_GPIO_Init+0x320>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_GPIO_Init+0x320>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002562:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_GPIO_Init+0x328>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d037      	beq.n	80025fe <HAL_GPIO_Init+0x23e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x32c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0x23a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_GPIO_Init+0x330>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x236>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_GPIO_Init+0x334>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x232>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a53      	ldr	r2, [pc, #332]	; (80026f8 <HAL_GPIO_Init+0x338>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x22e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x33c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x22a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x340>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x344>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x348>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_GPIO_Init+0x34c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x21a>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e012      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025da:	230a      	movs	r3, #10
 80025dc:	e010      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025de:	2308      	movs	r3, #8
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002610:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002642:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_GPIO_Init+0x350>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266c:	4a28      	ldr	r2, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x350>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x350>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_GPIO_Init+0x350>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_GPIO_Init+0x350>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae86 	bls.w	80023e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002766:	e002      	b.n	800276e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f806 	bl	80027ac <HAL_GPIO_EXTI_Callback>
  }
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c4:	b08f      	sub	sp, #60	; 0x3c
 80027c6:	af0a      	add	r7, sp, #40	; 0x28
 80027c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e116      	b.n	8002a02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fb44 	bl	8000e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fa42 	bl	8004c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	687e      	ldr	r6, [r7, #4]
 8002820:	466d      	mov	r5, sp
 8002822:	f106 0410 	add.w	r4, r6, #16
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002832:	e885 0003 	stmia.w	r5, {r0, r1}
 8002836:	1d33      	adds	r3, r6, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f002 f9d6 	bl	8004bec <USB_CoreInit>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0d7      	b.n	8002a02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f002 fa30 	bl	8004cbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e04a      	b.n	80028fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	333d      	adds	r3, #61	; 0x3d
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	333c      	adds	r3, #60	; 0x3c
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	b298      	uxth	r0, r3
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3342      	adds	r3, #66	; 0x42
 80028a0:	4602      	mov	r2, r0
 80028a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	333f      	adds	r3, #63	; 0x3f
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3344      	adds	r3, #68	; 0x44
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3348      	adds	r3, #72	; 0x48
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3350      	adds	r3, #80	; 0x50
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	3301      	adds	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d3af      	bcc.n	8002864 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	e044      	b.n	8002994 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3301      	adds	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d3b5      	bcc.n	800290a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	687e      	ldr	r6, [r7, #4]
 80029a6:	466d      	mov	r5, sp
 80029a8:	f106 0410 	add.w	r4, r6, #16
 80029ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029bc:	1d33      	adds	r3, r6, #4
 80029be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f002 f9a7 	bl	8004d14 <USB_DevInit>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e014      	b.n	8002a02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f80b 	bl	8002a0c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fb59 	bl	80050b2 <USB_DevDisconnect>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	10000003 	.word	0x10000003

08002a54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000

08002a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa2:	f7fe fb17 	bl	80010d4 <HAL_GetTick>
 8002aa6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa8:	e009      	b.n	8002abe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aaa:	f7fe fb13 	bl	80010d4 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab8:	d901      	bls.n	8002abe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e022      	b.n	8002b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d1ee      	bne.n	8002aaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad8:	f7fe fafc 	bl	80010d4 <HAL_GetTick>
 8002adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ade:	e009      	b.n	8002af4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae0:	f7fe faf8 	bl	80010d4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aee:	d901      	bls.n	8002af4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e007      	b.n	8002b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e29b      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b96      	ldr	r3, [pc, #600]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b44:	4b93      	ldr	r3, [pc, #588]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x62>
 8002b50:	4b90      	ldr	r3, [pc, #576]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d06c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x130>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d168      	bne.n	8002c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e275      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x7a>
 8002b80:	4b84      	ldr	r3, [pc, #528]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a83      	ldr	r2, [pc, #524]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e02e      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x9c>
 8002b96:	4b7f      	ldr	r3, [pc, #508]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7e      	ldr	r2, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7b      	ldr	r2, [pc, #492]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a72      	ldr	r2, [pc, #456]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xd8>
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6e      	ldr	r2, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6b      	ldr	r2, [pc, #428]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa6e 	bl	80010d4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fa6a 	bl	80010d4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e229      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b61      	ldr	r3, [pc, #388]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fa5a 	bl	80010d4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fa56 	bl	80010d4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e215      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x110>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d069      	beq.n	8002d26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c52:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x190>
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1e9      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	493d      	ldr	r1, [pc, #244]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e040      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fa0c 	bl	80010d4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fa08 	bl	80010d4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1c7      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4929      	ldr	r1, [pc, #164]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
 8002cf2:	e018      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f9e8 	bl	80010d4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe f9e4 	bl	80010d4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1a3      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d038      	beq.n	8002da4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe f9c5 	bl	80010d4 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fe f9c1 	bl	80010d4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e180      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x23a>
 8002d6c:	e01a      	b.n	8002da4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_RCC_OscConfig+0x280>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f9ab 	bl	80010d4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fe f9a7 	bl	80010d4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d903      	bls.n	8002d98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e166      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
 8002d94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a4 	beq.w	8002efa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a88      	ldr	r2, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b86      	ldr	r3, [pc, #536]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dda:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002de6:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe f96f 	bl	80010d4 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe f96b 	bl	80010d4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e12a      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCC_OscConfig+0x4d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x31a>
 8002e20:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a6f      	ldr	r2, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	e02d      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x33c>
 8002e36:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x35e>
 8002e58:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe f91f 	bl	80010d4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe f91b 	bl	80010d4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0d8      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x386>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f909 	bl	80010d4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe f905 	bl	80010d4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0c2      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a3c      	ldr	r2, [pc, #240]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80ae 	beq.w	8003060 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d06d      	beq.n	8002fec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d14b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f8d6 	bl	80010d4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe f8d2 	bl	80010d4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e091      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	491b      	ldr	r1, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe f8a4 	bl	80010d4 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f8a0 	bl	80010d4 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e05f      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x47c>
 8002fae:	e057      	b.n	8003060 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f88a 	bl	80010d4 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe f886 	bl	80010d4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e045      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4b0>
 8002fe2:	e03d      	b.n	8003060 <HAL_RCC_OscConfig+0x54c>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x558>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d030      	beq.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d129      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d122      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003022:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003024:	4293      	cmp	r3, r2
 8003026:	d119      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d10f      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d0      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4965      	ldr	r1, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4936      	ldr	r1, [pc, #216]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd ffb6 	bl	80010d4 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fd ffb2 	bl	80010d4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e053      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d210      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 020f 	bic.w	r2, r3, #15
 80031aa:	4922      	ldr	r1, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	fa21 f303 	lsr.w	r3, r1, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1d0>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd ff12 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	080051bc 	.word	0x080051bc
 8003240:	20000000 	.word	0x20000000
 8003244:	20000004 	.word	0x20000004

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d007      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x32>
 800326a:	2b08      	cmp	r3, #8
 800326c:	d008      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x38>
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 80b4 	bne.w	80033dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003276:	60bb      	str	r3, [r7, #8]
      break;
 8003278:	e0b3      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327a:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800327c:	60bb      	str	r3, [r7, #8]
      break;
 800327e:	e0b0      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800328a:	4b58      	ldr	r3, [pc, #352]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04a      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003296:	4b55      	ldr	r3, [pc, #340]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	099b      	lsrs	r3, r3, #6
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	ea03 0501 	and.w	r5, r3, r1
 80032ac:	ea04 0602 	and.w	r6, r4, r2
 80032b0:	4629      	mov	r1, r5
 80032b2:	4632      	mov	r2, r6
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	f04f 0400 	mov.w	r4, #0
 80032bc:	0154      	lsls	r4, r2, #5
 80032be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032c2:	014b      	lsls	r3, r1, #5
 80032c4:	4619      	mov	r1, r3
 80032c6:	4622      	mov	r2, r4
 80032c8:	1b49      	subs	r1, r1, r5
 80032ca:	eb62 0206 	sbc.w	r2, r2, r6
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0194      	lsls	r4, r2, #6
 80032d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032dc:	018b      	lsls	r3, r1, #6
 80032de:	1a5b      	subs	r3, r3, r1
 80032e0:	eb64 0402 	sbc.w	r4, r4, r2
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	00e2      	lsls	r2, r4, #3
 80032ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032f2:	00d9      	lsls	r1, r3, #3
 80032f4:	460b      	mov	r3, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	195b      	adds	r3, r3, r5
 80032fa:	eb44 0406 	adc.w	r4, r4, r6
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	0262      	lsls	r2, r4, #9
 8003308:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800330c:	0259      	lsls	r1, r3, #9
 800330e:	460b      	mov	r3, r1
 8003310:	4614      	mov	r4, r2
 8003312:	4618      	mov	r0, r3
 8003314:	4621      	mov	r1, r4
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fc ff8a 	bl	8000238 <__aeabi_uldivmod>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e049      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	f240 11ff 	movw	r1, #511	; 0x1ff
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	ea03 0501 	and.w	r5, r3, r1
 8003342:	ea04 0602 	and.w	r6, r4, r2
 8003346:	4629      	mov	r1, r5
 8003348:	4632      	mov	r2, r6
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0154      	lsls	r4, r2, #5
 8003354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003358:	014b      	lsls	r3, r1, #5
 800335a:	4619      	mov	r1, r3
 800335c:	4622      	mov	r2, r4
 800335e:	1b49      	subs	r1, r1, r5
 8003360:	eb62 0206 	sbc.w	r2, r2, r6
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	0194      	lsls	r4, r2, #6
 800336e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003372:	018b      	lsls	r3, r1, #6
 8003374:	1a5b      	subs	r3, r3, r1
 8003376:	eb64 0402 	sbc.w	r4, r4, r2
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003388:	00d9      	lsls	r1, r3, #3
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	195b      	adds	r3, r3, r5
 8003390:	eb44 0406 	adc.w	r4, r4, r6
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	02a2      	lsls	r2, r4, #10
 800339e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033a2:	0299      	lsls	r1, r3, #10
 80033a4:	460b      	mov	r3, r1
 80033a6:	4614      	mov	r4, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	4621      	mov	r1, r4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f04f 0400 	mov.w	r4, #0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4623      	mov	r3, r4
 80033b6:	f7fc ff3f 	bl	8000238 <__aeabi_uldivmod>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	60bb      	str	r3, [r7, #8]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033de:	60bb      	str	r3, [r7, #8]
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	68bb      	ldr	r3, [r7, #8]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <HAL_RCC_GetHCLKFreq+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000000 	.word	0x20000000

08003410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003414:	f7ff fff0 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003418:	4601      	mov	r1, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	080051cc 	.word	0x080051cc

08003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800343c:	f7ff ffdc 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003440:	4601      	mov	r1, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_RCC_GetPCLK2Freq+0x24>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	080051cc 	.word	0x080051cc

08003460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003488:	4b69      	ldr	r3, [pc, #420]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a68      	ldr	r2, [pc, #416]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	4964      	ldr	r1, [pc, #400]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ba:	4b5d      	ldr	r3, [pc, #372]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	4959      	ldr	r1, [pc, #356]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	494a      	ldr	r1, [pc, #296]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 808b 	beq.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a39      	ldr	r2, [pc, #228]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a34      	ldr	r2, [pc, #208]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003568:	f7fd fdb4 	bl	80010d4 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fd fdb0 	bl	80010d4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e38d      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800358e:	4b28      	ldr	r3, [pc, #160]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d035      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d02e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d114      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fd78 	bl	80010d4 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fd fd74 	bl	80010d4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e34f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ee      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003616:	d111      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003626:	400b      	ands	r3, r1
 8003628:	4901      	ldr	r1, [pc, #4]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
 800362e:	e00b      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000
 8003638:	0ffffcff 	.word	0x0ffffcff
 800363c:	4bb3      	ldr	r3, [pc, #716]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4ab2      	ldr	r2, [pc, #712]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003642:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003646:	6093      	str	r3, [r2, #8]
 8003648:	4bb0      	ldr	r3, [pc, #704]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	49ad      	ldr	r1, [pc, #692]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003666:	4ba9      	ldr	r3, [pc, #676]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366c:	4aa7      	ldr	r2, [pc, #668]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003676:	4ba5      	ldr	r3, [pc, #660]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003678:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	49a2      	ldr	r1, [pc, #648]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003694:	4b9d      	ldr	r3, [pc, #628]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	499a      	ldr	r1, [pc, #616]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b6:	4b95      	ldr	r3, [pc, #596]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	4991      	ldr	r1, [pc, #580]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d8:	4b8c      	ldr	r3, [pc, #560]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	4989      	ldr	r1, [pc, #548]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036fa:	4b84      	ldr	r3, [pc, #528]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4980      	ldr	r1, [pc, #512]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371c:	4b7b      	ldr	r3, [pc, #492]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4978      	ldr	r1, [pc, #480]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373e:	4b73      	ldr	r3, [pc, #460]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f023 020c 	bic.w	r2, r3, #12
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	496f      	ldr	r1, [pc, #444]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376e:	4967      	ldr	r1, [pc, #412]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003782:	4b62      	ldr	r3, [pc, #392]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	495e      	ldr	r1, [pc, #376]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a4:	4b59      	ldr	r3, [pc, #356]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	4956      	ldr	r1, [pc, #344]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037c6:	4b51      	ldr	r3, [pc, #324]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	494d      	ldr	r1, [pc, #308]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037e8:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	4945      	ldr	r1, [pc, #276]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800380a:	4b40      	ldr	r3, [pc, #256]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	493c      	ldr	r1, [pc, #240]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383a:	4934      	ldr	r1, [pc, #208]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d011      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385c:	492b      	ldr	r1, [pc, #172]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388e:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	491b      	ldr	r1, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c0:	4912      	ldr	r1, [pc, #72]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e4:	4909      	ldr	r1, [pc, #36]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	4985      	ldr	r1, [pc, #532]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003924:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003934:	497c      	ldr	r1, [pc, #496]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d005      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800394a:	f040 80d6 	bne.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a75      	ldr	r2, [pc, #468]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395a:	f7fd fbbb 	bl	80010d4 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003962:	f7fd fbb7 	bl	80010d4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	; 0x64
 800396e:	d901      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e194      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003974:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11d      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003994:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039a2:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	019a      	lsls	r2, r3, #6
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	071b      	lsls	r3, r3, #28
 80039c8:	4957      	ldr	r1, [pc, #348]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d02e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fa:	d129      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039fc:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0f1b      	lsrs	r3, r3, #28
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	019a      	lsls	r2, r3, #6
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	071b      	lsls	r3, r3, #28
 8003a30:	493d      	ldr	r1, [pc, #244]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	f023 021f 	bic.w	r2, r3, #31
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	3b01      	subs	r3, #1
 8003a48:	4937      	ldr	r1, [pc, #220]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01d      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a62:	0e1b      	lsrs	r3, r3, #24
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a70:	0f1b      	lsrs	r3, r3, #28
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	019a      	lsls	r2, r3, #6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	071b      	lsls	r3, r3, #28
 8003a90:	4925      	ldr	r1, [pc, #148]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d011      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	019a      	lsls	r2, r3, #6
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	071b      	lsls	r3, r3, #28
 8003ac0:	4919      	ldr	r1, [pc, #100]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a16      	ldr	r2, [pc, #88]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fd fafe 	bl	80010d4 <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003adc:	f7fd fafa 	bl	80010d4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e0d7      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 80cd 	bne.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0e:	f7fd fae1 	bl	80010d4 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b16:	f7fd fadd 	bl	80010d4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d903      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0ba      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003b28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b38:	d0ed      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d12a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b62:	4b51      	ldr	r3, [pc, #324]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	0f1b      	lsrs	r3, r3, #28
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	019a      	lsls	r2, r3, #6
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	061b      	lsls	r3, r3, #24
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	071b      	lsls	r3, r3, #28
 8003b96:	4944      	ldr	r1, [pc, #272]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b9e:	4b42      	ldr	r3, [pc, #264]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	493d      	ldr	r1, [pc, #244]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d022      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bcc:	d11d      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	0e1b      	lsrs	r3, r3, #24
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	0f1b      	lsrs	r3, r3, #28
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	019a      	lsls	r2, r3, #6
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	071b      	lsls	r3, r3, #28
 8003c02:	4929      	ldr	r1, [pc, #164]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d028      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	0e1b      	lsrs	r3, r3, #24
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	4917      	ldr	r1, [pc, #92]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c52:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4911      	ldr	r1, [pc, #68]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fd fa2e 	bl	80010d4 <HAL_GetTick>
 8003c78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c7c:	f7fd fa2a 	bl	80010d4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e007      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9a:	d1ef      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800

08003cac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e01d      	b.n	8003cfa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd f80a 	bl	8000cec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 f8a6 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e08a      	b.n	8003e32 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11b      	bne.n	8003d6a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f000 f91b 	bl	8003f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020c 	bic.w	r2, r2, #12
 8003d54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6999      	ldr	r1, [r3, #24]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	619a      	str	r2, [r3, #24]
 8003d68:	e05a      	b.n	8003e20 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d11c      	bne.n	8003daa <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f000 f970 	bl	8004064 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
 8003da8:	e03a      	b.n	8003e20 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f000 f98d 	bl	80040de <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 020c 	bic.w	r2, r2, #12
 8003dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69d9      	ldr	r1, [r3, #28]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	e01b      	b.n	8003e20 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f000 f9ad 	bl	8004156 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69d9      	ldr	r1, [r3, #28]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a40      	ldr	r2, [pc, #256]	; (8003f50 <TIM_Base_SetConfig+0x114>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <TIM_Base_SetConfig+0x118>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	; (8003f5c <TIM_Base_SetConfig+0x120>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3a      	ldr	r2, [pc, #232]	; (8003f60 <TIM_Base_SetConfig+0x124>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <TIM_Base_SetConfig+0x114>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d027      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <TIM_Base_SetConfig+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d023      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2b      	ldr	r2, [pc, #172]	; (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <TIM_Base_SetConfig+0x120>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <TIM_Base_SetConfig+0x124>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d017      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <TIM_Base_SetConfig+0x128>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <TIM_Base_SetConfig+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <TIM_Base_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <TIM_Base_SetConfig+0x134>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <TIM_Base_SetConfig+0x138>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <TIM_Base_SetConfig+0x13c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <TIM_Base_SetConfig+0x114>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <TIM_Base_SetConfig+0x124>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40010400 	.word	0x40010400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	40001800 	.word	0x40001800
 8003f74:	40001c00 	.word	0x40001c00
 8003f78:	40002000 	.word	0x40002000

08003f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <TIM_TI1_SetConfig+0xcc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d017      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_TI1_SetConfig+0xd0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_TI1_SetConfig+0xd4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_TI1_SetConfig+0xd8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <TIM_TI1_SetConfig+0xdc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a21      	ldr	r2, [pc, #132]	; (800405c <TIM_TI1_SetConfig+0xe0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x66>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <TIM_TI1_SetConfig+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <TIM_TI1_SetConfig+0x6a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <TIM_TI1_SetConfig+0x6c>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e003      	b.n	8004006 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 030a 	and.w	r3, r3, #10
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40010400 	.word	0x40010400
 800405c:	40014000 	.word	0x40014000
 8004060:	40001800 	.word	0x40001800

08004064 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0210 	bic.w	r2, r3, #16
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	031b      	lsls	r3, r3, #12
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800411a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	b2db      	uxtb	r3, r3
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800412e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	b29b      	uxth	r3, r3
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	031b      	lsls	r3, r3, #12
 80041ae:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e06d      	b.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a30      	ldr	r2, [pc, #192]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800426e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a20      	ldr	r2, [pc, #128]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d01d      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1a      	ldr	r2, [pc, #104]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10c      	bne.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40014000 	.word	0x40014000
 8004334:	40001800 	.word	0x40001800

08004338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e040      	b.n	80043cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fd4a 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f82c 	bl	80043d4 <UART_SetConfig>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e022      	b.n	80043cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 faca 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb51 	bl	8004a6c <UART_CheckIdleState>
 80043ca:	4603      	mov	r3, r0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4bb1      	ldr	r3, [pc, #708]	; (80046c8 <UART_SetConfig+0x2f4>)
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	430b      	orrs	r3, r1
 800440e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a9f      	ldr	r2, [pc, #636]	; (80046cc <UART_SetConfig+0x2f8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d121      	bne.n	8004498 <UART_SetConfig+0xc4>
 8004454:	4b9e      	ldr	r3, [pc, #632]	; (80046d0 <UART_SetConfig+0x2fc>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b03      	cmp	r3, #3
 8004460:	d816      	bhi.n	8004490 <UART_SetConfig+0xbc>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x94>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	08004485 	.word	0x08004485
 8004470:	0800447f 	.word	0x0800447f
 8004474:	0800448b 	.word	0x0800448b
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e151      	b.n	8004722 <UART_SetConfig+0x34e>
 800447e:	2302      	movs	r3, #2
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e14e      	b.n	8004722 <UART_SetConfig+0x34e>
 8004484:	2304      	movs	r3, #4
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e14b      	b.n	8004722 <UART_SetConfig+0x34e>
 800448a:	2308      	movs	r3, #8
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e148      	b.n	8004722 <UART_SetConfig+0x34e>
 8004490:	2310      	movs	r3, #16
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	bf00      	nop
 8004496:	e144      	b.n	8004722 <UART_SetConfig+0x34e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a8d      	ldr	r2, [pc, #564]	; (80046d4 <UART_SetConfig+0x300>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d134      	bne.n	800450c <UART_SetConfig+0x138>
 80044a2:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <UART_SetConfig+0x2fc>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d829      	bhi.n	8004504 <UART_SetConfig+0x130>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0xe4>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	08004505 	.word	0x08004505
 80044c0:	08004505 	.word	0x08004505
 80044c4:	08004505 	.word	0x08004505
 80044c8:	080044f9 	.word	0x080044f9
 80044cc:	08004505 	.word	0x08004505
 80044d0:	08004505 	.word	0x08004505
 80044d4:	08004505 	.word	0x08004505
 80044d8:	080044f3 	.word	0x080044f3
 80044dc:	08004505 	.word	0x08004505
 80044e0:	08004505 	.word	0x08004505
 80044e4:	08004505 	.word	0x08004505
 80044e8:	080044ff 	.word	0x080044ff
 80044ec:	2300      	movs	r3, #0
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e117      	b.n	8004722 <UART_SetConfig+0x34e>
 80044f2:	2302      	movs	r3, #2
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e114      	b.n	8004722 <UART_SetConfig+0x34e>
 80044f8:	2304      	movs	r3, #4
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e111      	b.n	8004722 <UART_SetConfig+0x34e>
 80044fe:	2308      	movs	r3, #8
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e10e      	b.n	8004722 <UART_SetConfig+0x34e>
 8004504:	2310      	movs	r3, #16
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	bf00      	nop
 800450a:	e10a      	b.n	8004722 <UART_SetConfig+0x34e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <UART_SetConfig+0x304>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d120      	bne.n	8004558 <UART_SetConfig+0x184>
 8004516:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <UART_SetConfig+0x2fc>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004520:	2b10      	cmp	r3, #16
 8004522:	d00f      	beq.n	8004544 <UART_SetConfig+0x170>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d802      	bhi.n	800452e <UART_SetConfig+0x15a>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <UART_SetConfig+0x164>
 800452c:	e010      	b.n	8004550 <UART_SetConfig+0x17c>
 800452e:	2b20      	cmp	r3, #32
 8004530:	d005      	beq.n	800453e <UART_SetConfig+0x16a>
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d009      	beq.n	800454a <UART_SetConfig+0x176>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x17c>
 8004538:	2300      	movs	r3, #0
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e0f1      	b.n	8004722 <UART_SetConfig+0x34e>
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e0ee      	b.n	8004722 <UART_SetConfig+0x34e>
 8004544:	2304      	movs	r3, #4
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e0eb      	b.n	8004722 <UART_SetConfig+0x34e>
 800454a:	2308      	movs	r3, #8
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e0e8      	b.n	8004722 <UART_SetConfig+0x34e>
 8004550:	2310      	movs	r3, #16
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	bf00      	nop
 8004556:	e0e4      	b.n	8004722 <UART_SetConfig+0x34e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5f      	ldr	r2, [pc, #380]	; (80046dc <UART_SetConfig+0x308>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d120      	bne.n	80045a4 <UART_SetConfig+0x1d0>
 8004562:	4b5b      	ldr	r3, [pc, #364]	; (80046d0 <UART_SetConfig+0x2fc>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d00f      	beq.n	8004590 <UART_SetConfig+0x1bc>
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d802      	bhi.n	800457a <UART_SetConfig+0x1a6>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <UART_SetConfig+0x1b0>
 8004578:	e010      	b.n	800459c <UART_SetConfig+0x1c8>
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d005      	beq.n	800458a <UART_SetConfig+0x1b6>
 800457e:	2bc0      	cmp	r3, #192	; 0xc0
 8004580:	d009      	beq.n	8004596 <UART_SetConfig+0x1c2>
 8004582:	e00b      	b.n	800459c <UART_SetConfig+0x1c8>
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e0cb      	b.n	8004722 <UART_SetConfig+0x34e>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e0c8      	b.n	8004722 <UART_SetConfig+0x34e>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e0c5      	b.n	8004722 <UART_SetConfig+0x34e>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e0c2      	b.n	8004722 <UART_SetConfig+0x34e>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	bf00      	nop
 80045a2:	e0be      	b.n	8004722 <UART_SetConfig+0x34e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <UART_SetConfig+0x30c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d124      	bne.n	80045f8 <UART_SetConfig+0x224>
 80045ae:	4b48      	ldr	r3, [pc, #288]	; (80046d0 <UART_SetConfig+0x2fc>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045bc:	d012      	beq.n	80045e4 <UART_SetConfig+0x210>
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d802      	bhi.n	80045ca <UART_SetConfig+0x1f6>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <UART_SetConfig+0x204>
 80045c8:	e012      	b.n	80045f0 <UART_SetConfig+0x21c>
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	d006      	beq.n	80045de <UART_SetConfig+0x20a>
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d4:	d009      	beq.n	80045ea <UART_SetConfig+0x216>
 80045d6:	e00b      	b.n	80045f0 <UART_SetConfig+0x21c>
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e0a1      	b.n	8004722 <UART_SetConfig+0x34e>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e09e      	b.n	8004722 <UART_SetConfig+0x34e>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e09b      	b.n	8004722 <UART_SetConfig+0x34e>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e098      	b.n	8004722 <UART_SetConfig+0x34e>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	bf00      	nop
 80045f6:	e094      	b.n	8004722 <UART_SetConfig+0x34e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a39      	ldr	r2, [pc, #228]	; (80046e4 <UART_SetConfig+0x310>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d124      	bne.n	800464c <UART_SetConfig+0x278>
 8004602:	4b33      	ldr	r3, [pc, #204]	; (80046d0 <UART_SetConfig+0x2fc>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d012      	beq.n	8004638 <UART_SetConfig+0x264>
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d802      	bhi.n	800461e <UART_SetConfig+0x24a>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <UART_SetConfig+0x258>
 800461c:	e012      	b.n	8004644 <UART_SetConfig+0x270>
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d006      	beq.n	8004632 <UART_SetConfig+0x25e>
 8004624:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004628:	d009      	beq.n	800463e <UART_SetConfig+0x26a>
 800462a:	e00b      	b.n	8004644 <UART_SetConfig+0x270>
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e077      	b.n	8004722 <UART_SetConfig+0x34e>
 8004632:	2302      	movs	r3, #2
 8004634:	77fb      	strb	r3, [r7, #31]
 8004636:	e074      	b.n	8004722 <UART_SetConfig+0x34e>
 8004638:	2304      	movs	r3, #4
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e071      	b.n	8004722 <UART_SetConfig+0x34e>
 800463e:	2308      	movs	r3, #8
 8004640:	77fb      	strb	r3, [r7, #31]
 8004642:	e06e      	b.n	8004722 <UART_SetConfig+0x34e>
 8004644:	2310      	movs	r3, #16
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	bf00      	nop
 800464a:	e06a      	b.n	8004722 <UART_SetConfig+0x34e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <UART_SetConfig+0x314>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d124      	bne.n	80046a0 <UART_SetConfig+0x2cc>
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <UART_SetConfig+0x2fc>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d012      	beq.n	800468c <UART_SetConfig+0x2b8>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	d802      	bhi.n	8004672 <UART_SetConfig+0x29e>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <UART_SetConfig+0x2ac>
 8004670:	e012      	b.n	8004698 <UART_SetConfig+0x2c4>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	d006      	beq.n	8004686 <UART_SetConfig+0x2b2>
 8004678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x2be>
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x2c4>
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e04d      	b.n	8004722 <UART_SetConfig+0x34e>
 8004686:	2302      	movs	r3, #2
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e04a      	b.n	8004722 <UART_SetConfig+0x34e>
 800468c:	2304      	movs	r3, #4
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e047      	b.n	8004722 <UART_SetConfig+0x34e>
 8004692:	2308      	movs	r3, #8
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e044      	b.n	8004722 <UART_SetConfig+0x34e>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	bf00      	nop
 800469e:	e040      	b.n	8004722 <UART_SetConfig+0x34e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <UART_SetConfig+0x318>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d139      	bne.n	800471e <UART_SetConfig+0x34a>
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <UART_SetConfig+0x2fc>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d027      	beq.n	800470a <UART_SetConfig+0x336>
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046be:	d817      	bhi.n	80046f0 <UART_SetConfig+0x31c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01c      	beq.n	80046fe <UART_SetConfig+0x32a>
 80046c4:	e027      	b.n	8004716 <UART_SetConfig+0x342>
 80046c6:	bf00      	nop
 80046c8:	efff69f3 	.word	0xefff69f3
 80046cc:	40011000 	.word	0x40011000
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40004400 	.word	0x40004400
 80046d8:	40004800 	.word	0x40004800
 80046dc:	40004c00 	.word	0x40004c00
 80046e0:	40005000 	.word	0x40005000
 80046e4:	40011400 	.word	0x40011400
 80046e8:	40007800 	.word	0x40007800
 80046ec:	40007c00 	.word	0x40007c00
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	d006      	beq.n	8004704 <UART_SetConfig+0x330>
 80046f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046fa:	d009      	beq.n	8004710 <UART_SetConfig+0x33c>
 80046fc:	e00b      	b.n	8004716 <UART_SetConfig+0x342>
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e00e      	b.n	8004722 <UART_SetConfig+0x34e>
 8004704:	2302      	movs	r3, #2
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e00b      	b.n	8004722 <UART_SetConfig+0x34e>
 800470a:	2304      	movs	r3, #4
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e008      	b.n	8004722 <UART_SetConfig+0x34e>
 8004710:	2308      	movs	r3, #8
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x34e>
 8004716:	2310      	movs	r3, #16
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	bf00      	nop
 800471c:	e001      	b.n	8004722 <UART_SetConfig+0x34e>
 800471e:	2310      	movs	r3, #16
 8004720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472a:	d17f      	bne.n	800482c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800472c:	7ffb      	ldrb	r3, [r7, #31]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d85c      	bhi.n	80047ec <UART_SetConfig+0x418>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x364>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800475d 	.word	0x0800475d
 800473c:	0800477d 	.word	0x0800477d
 8004740:	0800479d 	.word	0x0800479d
 8004744:	080047ed 	.word	0x080047ed
 8004748:	080047b5 	.word	0x080047b5
 800474c:	080047ed 	.word	0x080047ed
 8004750:	080047ed 	.word	0x080047ed
 8004754:	080047ed 	.word	0x080047ed
 8004758:	080047d5 	.word	0x080047d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe fe58 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	005a      	lsls	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	b29b      	uxth	r3, r3
 8004778:	61bb      	str	r3, [r7, #24]
        break;
 800477a:	e03a      	b.n	80047f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7fe fe5c 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8004780:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	b29b      	uxth	r3, r3
 8004798:	61bb      	str	r3, [r7, #24]
        break;
 800479a:	e02a      	b.n	80047f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	085a      	lsrs	r2, r3, #1
 80047a2:	4b5f      	ldr	r3, [pc, #380]	; (8004920 <UART_SetConfig+0x54c>)
 80047a4:	4413      	add	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6852      	ldr	r2, [r2, #4]
 80047aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	61bb      	str	r3, [r7, #24]
        break;
 80047b2:	e01e      	b.n	80047f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b4:	f7fe fd48 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80047b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	005a      	lsls	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	61bb      	str	r3, [r7, #24]
        break;
 80047d2:	e00e      	b.n	80047f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	61bb      	str	r3, [r7, #24]
        break;
 80047ea:	e002      	b.n	80047f2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
        break;
 80047f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d916      	bls.n	8004826 <UART_SetConfig+0x452>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d212      	bcs.n	8004826 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f023 030f 	bic.w	r3, r3, #15
 8004808:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	b29a      	uxth	r2, r3
 8004816:	897b      	ldrh	r3, [r7, #10]
 8004818:	4313      	orrs	r3, r2
 800481a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	897a      	ldrh	r2, [r7, #10]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e070      	b.n	8004908 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	75fb      	strb	r3, [r7, #23]
 800482a:	e06d      	b.n	8004908 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d859      	bhi.n	80048e6 <UART_SetConfig+0x512>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x464>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800487b 	.word	0x0800487b
 8004840:	08004899 	.word	0x08004899
 8004844:	080048e7 	.word	0x080048e7
 8004848:	080048b1 	.word	0x080048b1
 800484c:	080048e7 	.word	0x080048e7
 8004850:	080048e7 	.word	0x080048e7
 8004854:	080048e7 	.word	0x080048e7
 8004858:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fe fdd8 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004860:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	085a      	lsrs	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	b29b      	uxth	r3, r3
 8004876:	61bb      	str	r3, [r7, #24]
        break;
 8004878:	e038      	b.n	80048ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487a:	f7fe fddd 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800487e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085a      	lsrs	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	61bb      	str	r3, [r7, #24]
        break;
 8004896:	e029      	b.n	80048ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	085a      	lsrs	r2, r3, #1
 800489e:	4b21      	ldr	r3, [pc, #132]	; (8004924 <UART_SetConfig+0x550>)
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6852      	ldr	r2, [r2, #4]
 80048a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	61bb      	str	r3, [r7, #24]
        break;
 80048ae:	e01d      	b.n	80048ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b0:	f7fe fcca 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80048b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	085a      	lsrs	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	441a      	add	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	61bb      	str	r3, [r7, #24]
        break;
 80048cc:	e00e      	b.n	80048ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e002      	b.n	80048ec <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
        break;
 80048ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	d908      	bls.n	8004904 <UART_SetConfig+0x530>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d204      	bcs.n	8004904 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e001      	b.n	8004908 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	01e84800 	.word	0x01e84800
 8004924:	00f42400 	.word	0x00f42400

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a7a:	f7fc fb2b 	bl	80010d4 <HAL_GetTick>
 8004a7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d10e      	bne.n	8004aac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f82a 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e020      	b.n	8004aee <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d10e      	bne.n	8004ad8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f814 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e00a      	b.n	8004aee <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	e05d      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d059      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fc fae0 	bl	80010d4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11b      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e042      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02b      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d123      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00f      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d092      	beq.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bec:	b084      	sub	sp, #16
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	f107 001c 	add.w	r0, r7, #28
 8004bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d120      	bne.n	8004c46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <USB_CoreInit+0xac>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d105      	bne.n	8004c3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa52 	bl	80050e4 <USB_CoreReset>
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	e010      	b.n	8004c68 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa46 	bl	80050e4 <USB_CoreReset>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10b      	bne.n	8004c86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f043 0206 	orr.w	r2, r3, #6
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c92:	b004      	add	sp, #16
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	ffbdffbf 	.word	0xffbdffbf

08004c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 0201 	bic.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	e00b      	b.n	8004d02 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	e001      	b.n	8004d02 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e003      	b.n	8004d0a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d02:	2032      	movs	r0, #50	; 0x32
 8004d04:	f7fc f9f2 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d14:	b084      	sub	sp, #16
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e009      	b.n	8004d48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3340      	adds	r3, #64	; 0x40
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3301      	adds	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b0e      	cmp	r3, #14
 8004d4c:	d9f2      	bls.n	8004d34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11c      	bne.n	8004d8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e005      	b.n	8004d9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	4619      	mov	r1, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db4:	461a      	mov	r2, r3
 8004db6:	680b      	ldr	r3, [r1, #0]
 8004db8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10c      	bne.n	8004dda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f959 	bl	8005080 <USB_SetDevSpeed>
 8004dce:	e018      	b.n	8004e02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f954 	bl	8005080 <USB_SetDevSpeed>
 8004dd8:	e013      	b.n	8004e02 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d10c      	bne.n	8004dfa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004de6:	2100      	movs	r1, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f949 	bl	8005080 <USB_SetDevSpeed>
 8004dee:	e008      	b.n	8004e02 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004df0:	2101      	movs	r1, #1
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f944 	bl	8005080 <USB_SetDevSpeed>
 8004df8:	e003      	b.n	8004e02 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dfa:	2103      	movs	r1, #3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f93f 	bl	8005080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e02:	2110      	movs	r1, #16
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8f3 	bl	8004ff0 <USB_FlushTxFifo>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f911 	bl	800503c <USB_FlushRxFifo>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	461a      	mov	r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	461a      	mov	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	e043      	b.n	8004ed6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e64:	d118      	bne.n	8004e98 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	e013      	b.n	8004eaa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e008      	b.n	8004eaa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3b7      	bcc.n	8004e4e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	e043      	b.n	8004f6c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efa:	d118      	bne.n	8004f2e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e013      	b.n	8004f40 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	461a      	mov	r2, r3
 8004f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e008      	b.n	8004f40 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d3b7      	bcc.n	8004ee4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f043 0210 	orr.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <USB_DevInit+0x2d4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <USB_DevInit+0x2d8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fe4:	b004      	add	sp, #16
 8004fe6:	4770      	bx	lr
 8004fe8:	803c3800 	.word	0x803c3800
 8004fec:	40000004 	.word	0x40000004

08004ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <USB_FlushTxFifo+0x48>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e006      	b.n	800502a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b20      	cmp	r3, #32
 8005026:	d0f0      	beq.n	800500a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	00030d40 	.word	0x00030d40

0800503c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2210      	movs	r2, #16
 800504c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <USB_FlushRxFifo+0x40>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e006      	b.n	800506e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d0f0      	beq.n	800504e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	00030d40 	.word	0x00030d40

08005080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80050d2:	2003      	movs	r0, #3
 80050d4:	f7fc f80a 	bl	80010ec <HAL_Delay>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <USB_CoreReset+0x64>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e01b      	b.n	800513a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	daf2      	bge.n	80050f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f043 0201 	orr.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <USB_CoreReset+0x64>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d0f0      	beq.n	800511a <USB_CoreReset+0x36>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	00030d40 	.word	0x00030d40

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4e0d      	ldr	r6, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1ba4      	subs	r4, r4, r6
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2500      	movs	r5, #0
 8005158:	42a5      	cmp	r5, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4e0b      	ldr	r6, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f820 	bl	80051a4 <_init>
 8005164:	1ba4      	subs	r4, r4, r6
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2500      	movs	r5, #0
 800516a:	42a5      	cmp	r5, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005174:	4798      	blx	r3
 8005176:	3501      	adds	r5, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800517e:	4798      	blx	r3
 8005180:	3501      	adds	r5, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080051e4 	.word	0x080051e4
 8005188:	080051e4 	.word	0x080051e4
 800518c:	080051e4 	.word	0x080051e4
 8005190:	080051e8 	.word	0x080051e8

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <_init>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

080051b0 <_fini>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr
